install.packages("rmarkdown")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyverse")
#| echo: false
#| output: false
#| warning: false
library(tidyverse)
library(ggplot2)
library(dplyr)
# The palette with grey:
cbPalette <- c("#999999",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# The palette with black:
cbbPalette <- c("#000000",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# To use for fills, add
# scale_fill_manual(values=cbPalette)
# To use for line and point colors, add
# scale_colour_manual(values=cbPalette)
twitch <- read.csv("D:/rstudio/final_project_version02/twitch.csv")
twitch <- twitch |>
rename(
channel = Channel,
watch_time_mins = Watch.time.Minutes.,
stream_time_mins = Stream.time.minutes.,
peak_view_count = Peak.viewers,
avg_view_count = Average.viewers,
follower_count = Followers,
follower_gain_count = Followers.gained,
view_gain_count = Views.gained,
partnered = Partnered,
mature = Mature,
language = Language
)
head(twitch)
str(twitch)
G_twitch_streamers <- twitch |>
filter(`mature` == "False")
R18_twitch_streamers <- twitch |>
filter(`mature` == "True")
t.test(G_twitch_streamers$watch_time_mins, R18_twitch_streamers$watch_time_mins)
language_twitch <- twitch %>%
group_by(language) %>%   # Group the data by the language column
summarise(count = n())
language_twitch
# Basic piechart
ggplot(language_twitch, aes(x="", y=count, fill=language)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
nrow(unique(twitch$language))
n(unique(twitch$language))
nrow(unique(twitch$language))
unique(twitch$language)
install.packages("caret")
# Setting up dummy variables
dummies <- dummyVars(~ ., data = twitch)
#| echo: false
#| output: false
#| warning: false
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
# The palette with grey:
cbPalette <- c("#999999",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# The palette with black:
cbbPalette <- c("#000000",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# To use for fills, add
# scale_fill_manual(values=cbPalette)
# To use for line and point colors, add
# scale_colour_manual(values=cbPalette)
# Setting up dummy variables
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- twitch.frame(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- twitch.frame(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- twitch_frame.frame(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- data.frame(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- data.frame(transformed_twitch)
print(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ ., data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- data.frame(transformed_twitch)
# print(transformed_data)
View(transformed_twitch)
View(transformed_twitch)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ language, data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- data.frame(transformed_twitch)
# print(transformed_data)
# Setting up dummy variables
twitch_frame <- data.frame(twitch)
dummies <- dummyVars(~ language, data = twitch)
# Creating the model matrix
transformed_twitch <- predict(dummies, newdata = twitch)
# Converting to a data frame
transformed_data <- data.frame(transformed_twitch)
print(transformed_data)
head(twitch, 1)
str(twitch)
```{r}
```{r}
```{r}
View(twitch)
```{r}
print(colnames(twitch))
```{r}
```{r}
#| echo: false
#| output: false
#| warning: false
library(tidyverse)
library(ggplot2)
library(dplyr)
library(caret)
# The palette with grey:
cbPalette <- c("#999999",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# The palette with black:
cbbPalette <- c("#000000",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7")
# To use for fills, add
# scale_fill_manual(values=cbPalette)
# To use for line and point colors, add
# scale_colour_manual(values=cbPalette)
```{r}
model <- lm(foller_gain_count ~ view_gain_count + stream_time_mins, data=twitch)
```{r}
```{r}
View(twitch)
View(twitch)
```{r}
```{r}
```{r}
model <- lm(follower_gain_count ~ view_gain_count + language + stream_time_mins, data=twitch)
coefplot(model)
model <- lm(follower_gain_count ~ view_gain_count + language + stream_time_mins, data=twitch)
model <- lm(follower_gain_count ~ view_gain_count + language + stream_time_mins, data=twitch)
# Creating a dataframe of residuals and fitted values
resid_df <- data.frame(
Fitted = fitted(model),
Residuals = resid(model)
)
ggplot(resid_df, aes(x=Fitted, y=Residuals)) +
geom_point() +
geom_smooth(method="lm", se=FALSE, color="blue") +
labs(x="Fitted Values", y="Residuals", title="Residual vs. Fitted Plot") +
theme_minimal()
